// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/garden/v1/garden.proto

package gardenv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "harvest-hub/api/gen/proto/garden/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GardenServiceName is the fully-qualified name of the GardenService service.
	GardenServiceName = "garden.v1.GardenService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GardenServiceInsertSensorDataProcedure is the fully-qualified name of the GardenService's
	// InsertSensorData RPC.
	GardenServiceInsertSensorDataProcedure = "/garden.v1.GardenService/InsertSensorData"
	// GardenServiceGetSummaryProcedure is the fully-qualified name of the GardenService's GetSummary
	// RPC.
	GardenServiceGetSummaryProcedure = "/garden.v1.GardenService/GetSummary"
)

// GardenServiceClient is a client for the garden.v1.GardenService service.
type GardenServiceClient interface {
	// * Insère une nouvelle mesure capteur
	InsertSensorData(context.Context, *connect.Request[v1.InsertSensorDataRequest]) (*connect.Response[v1.InsertSensorDataResponse], error)
	// * Récupère un résumé agrégé sur une fenêtre de temps
	GetSummary(context.Context, *connect.Request[v1.GetSummaryRequest]) (*connect.Response[v1.GetSummaryResponse], error)
}

// NewGardenServiceClient constructs a client for the garden.v1.GardenService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGardenServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GardenServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gardenServiceMethods := v1.File_proto_garden_v1_garden_proto.Services().ByName("GardenService").Methods()
	return &gardenServiceClient{
		insertSensorData: connect.NewClient[v1.InsertSensorDataRequest, v1.InsertSensorDataResponse](
			httpClient,
			baseURL+GardenServiceInsertSensorDataProcedure,
			connect.WithSchema(gardenServiceMethods.ByName("InsertSensorData")),
			connect.WithClientOptions(opts...),
		),
		getSummary: connect.NewClient[v1.GetSummaryRequest, v1.GetSummaryResponse](
			httpClient,
			baseURL+GardenServiceGetSummaryProcedure,
			connect.WithSchema(gardenServiceMethods.ByName("GetSummary")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gardenServiceClient implements GardenServiceClient.
type gardenServiceClient struct {
	insertSensorData *connect.Client[v1.InsertSensorDataRequest, v1.InsertSensorDataResponse]
	getSummary       *connect.Client[v1.GetSummaryRequest, v1.GetSummaryResponse]
}

// InsertSensorData calls garden.v1.GardenService.InsertSensorData.
func (c *gardenServiceClient) InsertSensorData(ctx context.Context, req *connect.Request[v1.InsertSensorDataRequest]) (*connect.Response[v1.InsertSensorDataResponse], error) {
	return c.insertSensorData.CallUnary(ctx, req)
}

// GetSummary calls garden.v1.GardenService.GetSummary.
func (c *gardenServiceClient) GetSummary(ctx context.Context, req *connect.Request[v1.GetSummaryRequest]) (*connect.Response[v1.GetSummaryResponse], error) {
	return c.getSummary.CallUnary(ctx, req)
}

// GardenServiceHandler is an implementation of the garden.v1.GardenService service.
type GardenServiceHandler interface {
	// * Insère une nouvelle mesure capteur
	InsertSensorData(context.Context, *connect.Request[v1.InsertSensorDataRequest]) (*connect.Response[v1.InsertSensorDataResponse], error)
	// * Récupère un résumé agrégé sur une fenêtre de temps
	GetSummary(context.Context, *connect.Request[v1.GetSummaryRequest]) (*connect.Response[v1.GetSummaryResponse], error)
}

// NewGardenServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGardenServiceHandler(svc GardenServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gardenServiceMethods := v1.File_proto_garden_v1_garden_proto.Services().ByName("GardenService").Methods()
	gardenServiceInsertSensorDataHandler := connect.NewUnaryHandler(
		GardenServiceInsertSensorDataProcedure,
		svc.InsertSensorData,
		connect.WithSchema(gardenServiceMethods.ByName("InsertSensorData")),
		connect.WithHandlerOptions(opts...),
	)
	gardenServiceGetSummaryHandler := connect.NewUnaryHandler(
		GardenServiceGetSummaryProcedure,
		svc.GetSummary,
		connect.WithSchema(gardenServiceMethods.ByName("GetSummary")),
		connect.WithHandlerOptions(opts...),
	)
	return "/garden.v1.GardenService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GardenServiceInsertSensorDataProcedure:
			gardenServiceInsertSensorDataHandler.ServeHTTP(w, r)
		case GardenServiceGetSummaryProcedure:
			gardenServiceGetSummaryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGardenServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGardenServiceHandler struct{}

func (UnimplementedGardenServiceHandler) InsertSensorData(context.Context, *connect.Request[v1.InsertSensorDataRequest]) (*connect.Response[v1.InsertSensorDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("garden.v1.GardenService.InsertSensorData is not implemented"))
}

func (UnimplementedGardenServiceHandler) GetSummary(context.Context, *connect.Request[v1.GetSummaryRequest]) (*connect.Response[v1.GetSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("garden.v1.GardenService.GetSummary is not implemented"))
}
